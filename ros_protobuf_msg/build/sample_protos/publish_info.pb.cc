// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: publish_info.proto

#include "publish_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_publish_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageData_publish_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_publish_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_publish_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_publish_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorMetadata_publish_5finfo_2eproto;
namespace Excavator {
namespace data {
class PublishInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishInfo> _instance;
} _PublishInfo_default_instance_;
class SensorMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorMetadata> _instance;
} _SensorMetadata_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class PointCloudDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointCloud> _instance;
} _PointCloud_default_instance_;
class ImageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageData> _instance;
} _ImageData_default_instance_;
class CameraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Camera> _instance;
} _Camera_default_instance_;
}  // namespace data
}  // namespace Excavator
static void InitDefaultsscc_info_Camera_publish_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Excavator::data::_Camera_default_instance_;
    new (ptr) ::Excavator::data::Camera();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Camera_publish_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Camera_publish_5finfo_2eproto}, {
      &scc_info_SensorMetadata_publish_5finfo_2eproto.base,
      &scc_info_ImageData_publish_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_ImageData_publish_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Excavator::data::_ImageData_default_instance_;
    new (ptr) ::Excavator::data::ImageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageData_publish_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageData_publish_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_Point_publish_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Excavator::data::_Point_default_instance_;
    new (ptr) ::Excavator::data::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_publish_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_publish_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_PointCloud_publish_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Excavator::data::_PointCloud_default_instance_;
    new (ptr) ::Excavator::data::PointCloud();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PointCloud_publish_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PointCloud_publish_5finfo_2eproto}, {
      &scc_info_Point_publish_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_PublishInfo_publish_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Excavator::data::_PublishInfo_default_instance_;
    new (ptr) ::Excavator::data::PublishInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishInfo_publish_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublishInfo_publish_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_SensorMetadata_publish_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Excavator::data::_SensorMetadata_default_instance_;
    new (ptr) ::Excavator::data::SensorMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorMetadata_publish_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorMetadata_publish_5finfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_publish_5finfo_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_publish_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_publish_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_publish_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::PublishInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::PublishInfo, topic_name_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::PublishInfo, message_type_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::PublishInfo, queue_size_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::PublishInfo, is_latched_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::PublishInfo, vector_test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::SensorMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::SensorMetadata, frame_id_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::SensorMetadata, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::SensorMetadata, temperature_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::SensorMetadata, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Point, x_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Point, y_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Point, z_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Point, intensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::PointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::PointCloud, send_time_ns_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::PointCloud, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::ImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::ImageData, raw_data_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::ImageData, width_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::ImageData, height_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::ImageData, encoding_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::ImageData, stride_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, metadata_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, frame_rate_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, exposure_time_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, gain_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, focal_length_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, f_number_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, intrinsic_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, distortion_),
  PROTOBUF_FIELD_OFFSET(::Excavator::data::Camera, image_payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Excavator::data::PublishInfo)},
  { 10, -1, sizeof(::Excavator::data::SensorMetadata)},
  { 19, -1, sizeof(::Excavator::data::Point)},
  { 28, -1, sizeof(::Excavator::data::PointCloud)},
  { 35, -1, sizeof(::Excavator::data::ImageData)},
  { 45, -1, sizeof(::Excavator::data::Camera)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Excavator::data::_PublishInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Excavator::data::_SensorMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Excavator::data::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Excavator::data::_PointCloud_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Excavator::data::_ImageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Excavator::data::_Camera_default_instance_),
};

const char descriptor_table_protodef_publish_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022publish_info.proto\022\016Excavator.data\"t\n\013"
  "PublishInfo\022\022\n\ntopic_name\030\001 \001(\t\022\024\n\014messa"
  "ge_type\030\002 \001(\t\022\022\n\nqueue_size\030\003 \001(\r\022\022\n\nis_"
  "latched\030\004 \001(\010\022\023\n\013vector_test\030\005 \003(\001\"_\n\016Se"
  "nsorMetadata\022\020\n\010frame_id\030\001 \001(\t\022\021\n\tsensor"
  "_id\030\003 \001(\t\022\023\n\013temperature\030\004 \001(\002\022\023\n\013status"
  "_code\030\005 \001(\r\";\n\005Point\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
  "(\002\022\t\n\001z\030\003 \001(\002\022\021\n\tintensity\030\004 \001(\002\"I\n\nPoin"
  "tCloud\022\024\n\014send_time_ns\030\001 \001(\003\022%\n\006points\030\002"
  " \003(\0132\025.Excavator.data.Point\"\312\001\n\tImageDat"
  "a\022\020\n\010raw_data\030\001 \001(\014\022\r\n\005width\030\002 \001(\r\022\016\n\006he"
  "ight\030\003 \001(\r\0227\n\010encoding\030\004 \001(\0162%.Excavator"
  ".data.ImageData.PixelFormat\022\016\n\006stride\030\005 "
  "\001(\r\"C\n\013PixelFormat\022\t\n\005MONO8\020\000\022\010\n\004RGB8\020\001\022"
  "\010\n\004BGR8\020\002\022\t\n\005RGBA8\020\003\022\n\n\006YUV420\020\004\"\233\002\n\006Cam"
  "era\0220\n\010metadata\030\001 \001(\0132\036.Excavator.data.S"
  "ensorMetadata\022\022\n\nframe_rate\030\002 \001(\002\022\025\n\rexp"
  "osure_time\030\003 \001(\002\022\014\n\004gain\030\004 \001(\002\022\024\n\014focal_"
  "length\030\005 \001(\002\022\020\n\010f_number\030\006 \001(\002\022.\n\traw_im"
  "age\030\007 \001(\0132\031.Excavator.data.ImageDataH\000\022\026"
  "\n\014jpeg_encoded\030\010 \001(\tH\000\022\021\n\tintrinsic\030\t \003("
  "\002\022\022\n\ndistortion\030\n \003(\002B\017\n\rimage_payloadb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_publish_5finfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_publish_5finfo_2eproto_sccs[6] = {
  &scc_info_Camera_publish_5finfo_2eproto.base,
  &scc_info_ImageData_publish_5finfo_2eproto.base,
  &scc_info_Point_publish_5finfo_2eproto.base,
  &scc_info_PointCloud_publish_5finfo_2eproto.base,
  &scc_info_PublishInfo_publish_5finfo_2eproto.base,
  &scc_info_SensorMetadata_publish_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_publish_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_publish_5finfo_2eproto = {
  false, false, descriptor_table_protodef_publish_5finfo_2eproto, "publish_info.proto", 886,
  &descriptor_table_publish_5finfo_2eproto_once, descriptor_table_publish_5finfo_2eproto_sccs, descriptor_table_publish_5finfo_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_publish_5finfo_2eproto::offsets,
  file_level_metadata_publish_5finfo_2eproto, 6, file_level_enum_descriptors_publish_5finfo_2eproto, file_level_service_descriptors_publish_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_publish_5finfo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_publish_5finfo_2eproto)), true);
namespace Excavator {
namespace data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageData_PixelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_publish_5finfo_2eproto);
  return file_level_enum_descriptors_publish_5finfo_2eproto[0];
}
bool ImageData_PixelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageData_PixelFormat ImageData::MONO8;
constexpr ImageData_PixelFormat ImageData::RGB8;
constexpr ImageData_PixelFormat ImageData::BGR8;
constexpr ImageData_PixelFormat ImageData::RGBA8;
constexpr ImageData_PixelFormat ImageData::YUV420;
constexpr ImageData_PixelFormat ImageData::PixelFormat_MIN;
constexpr ImageData_PixelFormat ImageData::PixelFormat_MAX;
constexpr int ImageData::PixelFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PublishInfo::_Internal {
 public:
};

PublishInfo::PublishInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vector_test_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Excavator.data.PublishInfo)
}
PublishInfo::PublishInfo(const PublishInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vector_test_(from.vector_test_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic_name().empty()) {
    topic_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_topic_name(), 
      GetArena());
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_type().empty()) {
    message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_type(), 
      GetArena());
  }
  ::memcpy(&queue_size_, &from.queue_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_latched_) -
    reinterpret_cast<char*>(&queue_size_)) + sizeof(is_latched_));
  // @@protoc_insertion_point(copy_constructor:Excavator.data.PublishInfo)
}

void PublishInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishInfo_publish_5finfo_2eproto.base);
  topic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&queue_size_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_latched_) -
      reinterpret_cast<char*>(&queue_size_)) + sizeof(is_latched_));
}

PublishInfo::~PublishInfo() {
  // @@protoc_insertion_point(destructor:Excavator.data.PublishInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  topic_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishInfo::ArenaDtor(void* object) {
  PublishInfo* _this = reinterpret_cast< PublishInfo* >(object);
  (void)_this;
}
void PublishInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishInfo& PublishInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishInfo_publish_5finfo_2eproto.base);
  return *internal_default_instance();
}


void PublishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Excavator.data.PublishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_test_.Clear();
  topic_name_.ClearToEmpty();
  message_type_.ClearToEmpty();
  ::memset(&queue_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_latched_) -
      reinterpret_cast<char*>(&queue_size_)) + sizeof(is_latched_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Excavator.data.PublishInfo.topic_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Excavator.data.PublishInfo.message_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 queue_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_latched = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_latched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double vector_test = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vector_test(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_vector_test(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Excavator.data.PublishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic_name = 1;
  if (this->topic_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic_name().data(), static_cast<int>(this->_internal_topic_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Excavator.data.PublishInfo.topic_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic_name(), target);
  }

  // string message_type = 2;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Excavator.data.PublishInfo.message_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_type(), target);
  }

  // uint32 queue_size = 3;
  if (this->queue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_queue_size(), target);
  }

  // bool is_latched = 4;
  if (this->is_latched() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_latched(), target);
  }

  // repeated double vector_test = 5;
  if (this->_internal_vector_test_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_vector_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Excavator.data.PublishInfo)
  return target;
}

size_t PublishInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Excavator.data.PublishInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double vector_test = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vector_test_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vector_test_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string topic_name = 1;
  if (this->topic_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic_name());
  }

  // string message_type = 2;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // uint32 queue_size = 3;
  if (this->queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_queue_size());
  }

  // bool is_latched = 4;
  if (this->is_latched() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Excavator.data.PublishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Excavator.data.PublishInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Excavator.data.PublishInfo)
    MergeFrom(*source);
  }
}

void PublishInfo::MergeFrom(const PublishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Excavator.data.PublishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_test_.MergeFrom(from.vector_test_);
  if (from.topic_name().size() > 0) {
    _internal_set_topic_name(from._internal_topic_name());
  }
  if (from.message_type().size() > 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from.queue_size() != 0) {
    _internal_set_queue_size(from._internal_queue_size());
  }
  if (from.is_latched() != 0) {
    _internal_set_is_latched(from._internal_is_latched());
  }
}

void PublishInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Excavator.data.PublishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishInfo::CopyFrom(const PublishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Excavator.data.PublishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishInfo::IsInitialized() const {
  return true;
}

void PublishInfo::InternalSwap(PublishInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vector_test_.InternalSwap(&other->vector_test_);
  topic_name_.Swap(&other->topic_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishInfo, is_latched_)
      + sizeof(PublishInfo::is_latched_)
      - PROTOBUF_FIELD_OFFSET(PublishInfo, queue_size_)>(
          reinterpret_cast<char*>(&queue_size_),
          reinterpret_cast<char*>(&other->queue_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SensorMetadata::_Internal {
 public:
};

SensorMetadata::SensorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Excavator.data.SensorMetadata)
}
SensorMetadata::SensorMetadata(const SensorMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame_id(), 
      GetArena());
  }
  sensor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sensor_id().empty()) {
    sensor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sensor_id(), 
      GetArena());
  }
  ::memcpy(&temperature_, &from.temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&temperature_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:Excavator.data.SensorMetadata)
}

void SensorMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorMetadata_publish_5finfo_2eproto.base);
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sensor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&temperature_)) + sizeof(status_code_));
}

SensorMetadata::~SensorMetadata() {
  // @@protoc_insertion_point(destructor:Excavator.data.SensorMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sensor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorMetadata::ArenaDtor(void* object) {
  SensorMetadata* _this = reinterpret_cast< SensorMetadata* >(object);
  (void)_this;
}
void SensorMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorMetadata& SensorMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorMetadata_publish_5finfo_2eproto.base);
  return *internal_default_instance();
}


void SensorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Excavator.data.SensorMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_id_.ClearToEmpty();
  sensor_id_.ClearToEmpty();
  ::memset(&temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&temperature_)) + sizeof(status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Excavator.data.SensorMetadata.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sensor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sensor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Excavator.data.SensorMetadata.sensor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 status_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Excavator.data.SensorMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string frame_id = 1;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Excavator.data.SensorMetadata.frame_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame_id(), target);
  }

  // string sensor_id = 3;
  if (this->sensor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_id().data(), static_cast<int>(this->_internal_sensor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Excavator.data.SensorMetadata.sensor_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sensor_id(), target);
  }

  // float temperature = 4;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_temperature(), target);
  }

  // uint32 status_code = 5;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Excavator.data.SensorMetadata)
  return target;
}

size_t SensorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Excavator.data.SensorMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_id = 1;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // string sensor_id = 3;
  if (this->sensor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_id());
  }

  // float temperature = 4;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 status_code = 5;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Excavator.data.SensorMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Excavator.data.SensorMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Excavator.data.SensorMetadata)
    MergeFrom(*source);
  }
}

void SensorMetadata::MergeFrom(const SensorMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Excavator.data.SensorMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id().size() > 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.sensor_id().size() > 0) {
    _internal_set_sensor_id(from._internal_sensor_id());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    _internal_set_temperature(from._internal_temperature());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void SensorMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Excavator.data.SensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMetadata::CopyFrom(const SensorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Excavator.data.SensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMetadata::IsInitialized() const {
  return true;
}

void SensorMetadata::InternalSwap(SensorMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sensor_id_.Swap(&other->sensor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorMetadata, status_code_)
      + sizeof(SensorMetadata::status_code_)
      - PROTOBUF_FIELD_OFFSET(SensorMetadata, temperature_)>(
          reinterpret_cast<char*>(&temperature_),
          reinterpret_cast<char*>(&other->temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Excavator.data.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&intensity_) -
    reinterpret_cast<char*>(&x_)) + sizeof(intensity_));
  // @@protoc_insertion_point(copy_constructor:Excavator.data.Point)
}

void Point::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&x_)) + sizeof(intensity_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:Excavator.data.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_publish_5finfo_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Excavator.data.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&x_)) + sizeof(intensity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float intensity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Excavator.data.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float intensity = 4;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_intensity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Excavator.data.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Excavator.data.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float intensity = 4;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Excavator.data.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Excavator.data.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Excavator.data.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Excavator.data.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    _internal_set_intensity(from._internal_intensity());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Excavator.data.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Excavator.data.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, intensity_)
      + sizeof(Point::intensity_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PointCloud::_Internal {
 public:
};

PointCloud::PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Excavator.data.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  send_time_ns_ = from.send_time_ns_;
  // @@protoc_insertion_point(copy_constructor:Excavator.data.PointCloud)
}

void PointCloud::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointCloud_publish_5finfo_2eproto.base);
  send_time_ns_ = PROTOBUF_LONGLONG(0);
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:Excavator.data.PointCloud)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PointCloud::ArenaDtor(void* object) {
  PointCloud* _this = reinterpret_cast< PointCloud* >(object);
  (void)_this;
}
void PointCloud::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointCloud& PointCloud::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointCloud_publish_5finfo_2eproto.base);
  return *internal_default_instance();
}


void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:Excavator.data.PointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  send_time_ns_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointCloud::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 send_time_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          send_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Excavator.data.Point points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointCloud::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Excavator.data.PointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 send_time_ns = 1;
  if (this->send_time_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_send_time_ns(), target);
  }

  // repeated .Excavator.data.Point points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Excavator.data.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Excavator.data.PointCloud)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Excavator.data.Point points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 send_time_ns = 1;
  if (this->send_time_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_send_time_ns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointCloud::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Excavator.data.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloud* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointCloud>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Excavator.data.PointCloud)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Excavator.data.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Excavator.data.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.send_time_ns() != 0) {
    _internal_set_send_time_ns(from._internal_send_time_ns());
  }
}

void PointCloud::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Excavator.data.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Excavator.data.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::InternalSwap(PointCloud* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  swap(send_time_ns_, other->send_time_ns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloud::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImageData::_Internal {
 public:
};

ImageData::ImageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Excavator.data.ImageData)
}
ImageData::ImageData(const ImageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_data().empty()) {
    raw_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_data(), 
      GetArena());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&width_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:Excavator.data.ImageData)
}

void ImageData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageData_publish_5finfo_2eproto.base);
  raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&width_)) + sizeof(stride_));
}

ImageData::~ImageData() {
  // @@protoc_insertion_point(destructor:Excavator.data.ImageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  raw_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageData::ArenaDtor(void* object) {
  ImageData* _this = reinterpret_cast< ImageData* >(object);
  (void)_this;
}
void ImageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageData& ImageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageData_publish_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:Excavator.data.ImageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_data_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&width_)) + sizeof(stride_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_raw_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Excavator.data.ImageData.PixelFormat encoding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::Excavator::data::ImageData_PixelFormat>(val));
        } else goto handle_unusual;
        continue;
      // uint32 stride = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Excavator.data.ImageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw_data = 1;
  if (this->raw_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_raw_data(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // .Excavator.data.ImageData.PixelFormat encoding = 4;
  if (this->encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_encoding(), target);
  }

  // uint32 stride = 5;
  if (this->stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Excavator.data.ImageData)
  return target;
}

size_t ImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Excavator.data.ImageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes raw_data = 1;
  if (this->raw_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_data());
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // .Excavator.data.ImageData.PixelFormat encoding = 4;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  // uint32 stride = 5;
  if (this->stride() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stride());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Excavator.data.ImageData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Excavator.data.ImageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Excavator.data.ImageData)
    MergeFrom(*source);
  }
}

void ImageData::MergeFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Excavator.data.ImageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_data().size() > 0) {
    _internal_set_raw_data(from._internal_raw_data());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  if (from.stride() != 0) {
    _internal_set_stride(from._internal_stride());
  }
}

void ImageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Excavator.data.ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageData::CopyFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Excavator.data.ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData::IsInitialized() const {
  return true;
}

void ImageData::InternalSwap(ImageData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  raw_data_.Swap(&other->raw_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageData, stride_)
      + sizeof(ImageData::stride_)
      - PROTOBUF_FIELD_OFFSET(ImageData, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Camera::_Internal {
 public:
  static const ::Excavator::data::SensorMetadata& metadata(const Camera* msg);
  static const ::Excavator::data::ImageData& raw_image(const Camera* msg);
};

const ::Excavator::data::SensorMetadata&
Camera::_Internal::metadata(const Camera* msg) {
  return *msg->metadata_;
}
const ::Excavator::data::ImageData&
Camera::_Internal::raw_image(const Camera* msg) {
  return *msg->image_payload_.raw_image_;
}
void Camera::set_allocated_raw_image(::Excavator::data::ImageData* raw_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_image_payload();
  if (raw_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(raw_image);
    if (message_arena != submessage_arena) {
      raw_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_image, submessage_arena);
    }
    set_has_raw_image();
    image_payload_.raw_image_ = raw_image;
  }
  // @@protoc_insertion_point(field_set_allocated:Excavator.data.Camera.raw_image)
}
Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  intrinsic_(arena),
  distortion_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Excavator.data.Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      intrinsic_(from.intrinsic_),
      distortion_(from.distortion_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::Excavator::data::SensorMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&frame_rate_, &from.frame_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_number_) -
    reinterpret_cast<char*>(&frame_rate_)) + sizeof(f_number_));
  clear_has_image_payload();
  switch (from.image_payload_case()) {
    case kRawImage: {
      _internal_mutable_raw_image()->::Excavator::data::ImageData::MergeFrom(from._internal_raw_image());
      break;
    }
    case kJpegEncoded: {
      _internal_set_jpeg_encoded(from._internal_jpeg_encoded());
      break;
    }
    case IMAGE_PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Excavator.data.Camera)
}

void Camera::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Camera_publish_5finfo_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&f_number_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(f_number_));
  clear_has_image_payload();
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:Excavator.data.Camera)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Camera::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (has_image_payload()) {
    clear_image_payload();
  }
}

void Camera::ArenaDtor(void* object) {
  Camera* _this = reinterpret_cast< Camera* >(object);
  (void)_this;
}
void Camera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Camera& Camera::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Camera_publish_5finfo_2eproto.base);
  return *internal_default_instance();
}


void Camera::clear_image_payload() {
// @@protoc_insertion_point(one_of_clear_start:Excavator.data.Camera)
  switch (image_payload_case()) {
    case kRawImage: {
      if (GetArena() == nullptr) {
        delete image_payload_.raw_image_;
      }
      break;
    }
    case kJpegEncoded: {
      image_payload_.jpeg_encoded_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case IMAGE_PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IMAGE_PAYLOAD_NOT_SET;
}


void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:Excavator.data.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intrinsic_.Clear();
  distortion_.Clear();
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&frame_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_number_) -
      reinterpret_cast<char*>(&frame_rate_)) + sizeof(f_number_));
  clear_image_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Excavator.data.SensorMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float frame_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float exposure_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          exposure_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float focal_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          focal_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          f_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Excavator.data.ImageData raw_image = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string jpeg_encoded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_jpeg_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Excavator.data.Camera.jpeg_encoded"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float intrinsic = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intrinsic(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_intrinsic(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float distortion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_distortion(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          _internal_add_distortion(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Excavator.data.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Excavator.data.SensorMetadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // float frame_rate = 2;
  if (!(this->frame_rate() <= 0 && this->frame_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_frame_rate(), target);
  }

  // float exposure_time = 3;
  if (!(this->exposure_time() <= 0 && this->exposure_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_exposure_time(), target);
  }

  // float gain = 4;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_gain(), target);
  }

  // float focal_length = 5;
  if (!(this->focal_length() <= 0 && this->focal_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_focal_length(), target);
  }

  // float f_number = 6;
  if (!(this->f_number() <= 0 && this->f_number() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_f_number(), target);
  }

  // .Excavator.data.ImageData raw_image = 7;
  if (_internal_has_raw_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::raw_image(this), target, stream);
  }

  // string jpeg_encoded = 8;
  if (_internal_has_jpeg_encoded()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jpeg_encoded().data(), static_cast<int>(this->_internal_jpeg_encoded().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Excavator.data.Camera.jpeg_encoded");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_jpeg_encoded(), target);
  }

  // repeated float intrinsic = 9;
  if (this->_internal_intrinsic_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_intrinsic(), target);
  }

  // repeated float distortion = 10;
  if (this->_internal_distortion_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_distortion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Excavator.data.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Excavator.data.Camera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float intrinsic = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intrinsic_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intrinsic_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float distortion = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_distortion_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _distortion_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Excavator.data.SensorMetadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // float frame_rate = 2;
  if (!(this->frame_rate() <= 0 && this->frame_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float exposure_time = 3;
  if (!(this->exposure_time() <= 0 && this->exposure_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float gain = 4;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    total_size += 1 + 4;
  }

  // float focal_length = 5;
  if (!(this->focal_length() <= 0 && this->focal_length() >= 0)) {
    total_size += 1 + 4;
  }

  // float f_number = 6;
  if (!(this->f_number() <= 0 && this->f_number() >= 0)) {
    total_size += 1 + 4;
  }

  switch (image_payload_case()) {
    // .Excavator.data.ImageData raw_image = 7;
    case kRawImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_payload_.raw_image_);
      break;
    }
    // string jpeg_encoded = 8;
    case kJpegEncoded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_jpeg_encoded());
      break;
    }
    case IMAGE_PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Excavator.data.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Camera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Excavator.data.Camera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Excavator.data.Camera)
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Excavator.data.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intrinsic_.MergeFrom(from.intrinsic_);
  distortion_.MergeFrom(from.distortion_);
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::Excavator::data::SensorMetadata::MergeFrom(from._internal_metadata());
  }
  if (!(from.frame_rate() <= 0 && from.frame_rate() >= 0)) {
    _internal_set_frame_rate(from._internal_frame_rate());
  }
  if (!(from.exposure_time() <= 0 && from.exposure_time() >= 0)) {
    _internal_set_exposure_time(from._internal_exposure_time());
  }
  if (!(from.gain() <= 0 && from.gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
  if (!(from.focal_length() <= 0 && from.focal_length() >= 0)) {
    _internal_set_focal_length(from._internal_focal_length());
  }
  if (!(from.f_number() <= 0 && from.f_number() >= 0)) {
    _internal_set_f_number(from._internal_f_number());
  }
  switch (from.image_payload_case()) {
    case kRawImage: {
      _internal_mutable_raw_image()->::Excavator::data::ImageData::MergeFrom(from._internal_raw_image());
      break;
    }
    case kJpegEncoded: {
      _internal_set_jpeg_encoded(from._internal_jpeg_encoded());
      break;
    }
    case IMAGE_PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Camera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Excavator.data.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Excavator.data.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  intrinsic_.InternalSwap(&other->intrinsic_);
  distortion_.InternalSwap(&other->distortion_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Camera, f_number_)
      + sizeof(Camera::f_number_)
      - PROTOBUF_FIELD_OFFSET(Camera, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
  swap(image_payload_, other->image_payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace Excavator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Excavator::data::PublishInfo* Arena::CreateMaybeMessage< ::Excavator::data::PublishInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Excavator::data::PublishInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Excavator::data::SensorMetadata* Arena::CreateMaybeMessage< ::Excavator::data::SensorMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Excavator::data::SensorMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Excavator::data::Point* Arena::CreateMaybeMessage< ::Excavator::data::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Excavator::data::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::Excavator::data::PointCloud* Arena::CreateMaybeMessage< ::Excavator::data::PointCloud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Excavator::data::PointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::Excavator::data::ImageData* Arena::CreateMaybeMessage< ::Excavator::data::ImageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Excavator::data::ImageData >(arena);
}
template<> PROTOBUF_NOINLINE ::Excavator::data::Camera* Arena::CreateMaybeMessage< ::Excavator::data::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Excavator::data::Camera >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
